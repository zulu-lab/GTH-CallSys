// ==UserScript==
// @name         Torn - Call & Help (Profile/Attack, PDA, Long-Press Paste)
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  Call: '! NOME5-ID in 5' | Help: '! Help🚨 <attack-link>' | Copia affidabile + long-press 1.5s (buffer 40s). Bottoni piccoli, su Profilo dentro "User Information", su Attacco accanto al nome target. PDA-friendly.
// @match        https://www.torn.com/*
// @run-at       document-idle
// @grant        GM_setClipboard
// ==/UserScript==

(function () {
  'use strict';

  const API_KEY = '6Fyu7sCMGBqj3me5'; // tua key

  // ——————————————————————————————————
  // BLOCCO STABILE — NON MODIFICARE
  // ——————————————————————————————————
  let cached = { id: null, name: null, t: 0 };

  const toast = (msg)=>{
    const t=document.createElement('div');
    t.textContent=msg;
    Object.assign(t.style,{position:'fixed',left:'50%',top:'92px',transform:'translateX(-50%)',
      background:'rgba(0,0,0,.8)',color:'#fff',padding:'8px 12px',borderRadius:'8px',
      fontSize:'14px',zIndex:2147483647,opacity:'0',transition:'opacity .15s',pointerEvents:'none'});
    document.body.appendChild(t); requestAnimationFrame(()=>t.style.opacity='1');
    setTimeout(()=>{t.style.opacity='0'; setTimeout(()=>t.remove(),160);},1100);
  };

  function getIdFromUrl() {
    const href=String(location.href);
    try {
      const u=new URL(href), p=u.searchParams;
      for (const k of ['XID','xid','userID','userid','user2ID','targetID','targetid']) {
        const v=p.get(k); if (v && /\d+/.test(v)) return v.match(/\d+/)[0];
      }
    } catch(_){}
    const m=href.match(/[?#&](?:XID|xid|userID|userid|user2ID|targetID|targetid)=(\d{1,12})/i);
    return m?m[1]:null;
  }

  async function fetchName(id){
    try{
      const res=await fetch(`https://api.torn.com/user/${id}?selections=basic&key=${API_KEY}`);
      const data=await res.json();
      return data?.name||null;
    }catch(_){ return null; }
  }

  async function prefetch(){
    const id=getIdFromUrl();
    if (!id) return;
    if (cached.id===id && (Date.now()-cached.t)<90000 && cached.name) return;
    const name=await fetchName(id);
    if (name) cached={ id, name, t: Date.now() };
  }

  function copyNow(text){
    try { if (typeof GM_setClipboard==='function'){ GM_setClipboard(text,'text'); return true; } } catch(_) {}
    try {
      const ta=document.createElement('textarea');
      ta.value=text; ta.setAttribute('readonly','');
      Object.assign(ta.style,{ position:'fixed', bottom:'8px', left:'8px',
        width:'1px', height:'1px', opacity:'0.01', zIndex:2147483646 });
      document.body.appendChild(ta);
      ta.focus(); ta.select();
      const ok=document.execCommand('copy');
      ta.blur(); ta.remove();
      if (ok) return true;
    } catch(_){}
    return false;
  }
  // ——————————————————————————————————
  // FINE BLOCCO STABILE
  // ——————————————————————————————————

  // —— Helpers React/DOM chat ——
  function setControlledValue(el, value) {
    const proto = el.tagName === 'TEXTAREA'
      ? (window.HTMLTextAreaElement && HTMLTextAreaElement.prototype)
      : (window.HTMLInputElement && HTMLInputElement.prototype);
    if (!proto) { el.value = value; el.dispatchEvent(new Event('input',{bubbles:true})); return; }
    const desc = Object.getOwnPropertyDescriptor(proto, 'value');
    const set = desc && desc.set;
    if (set) { set.call(el, value); el.dispatchEvent(new Event('input',{bubbles:true})); }
    else { el.value=value; el.dispatchEvent(new Event('input',{bubbles:true})); }
  }
  function findChatTextarea() {
    const all = Array.from(document.querySelectorAll('textarea[class*="textarea"], textarea'));
    return all.find(el => el && el.offsetParent !== null && !el.disabled) || null;
  }
  function setChatValue(text) {
    const ta = findChatTextarea();
    if (!ta) return false;
    setControlledValue(ta, text);
    return true;
  }

  // —— Long‑press 1.5s (buffer 40s) ——
  let lastCopied = { text: '', ts: 0 };
  const HOLD_MS   = 1500;
  const WINDOW_MS = 40000;
  let holdTimer = null, holdTarget = null, progressEl=null, progressTimer=null;

  function isEditableTarget(el){
    if (!el) return false;
    if (el.isContentEditable) return true;
    if (el.tagName==='TEXTAREA') return true;
    if (el.tagName==='INPUT'){
      const t=(el.type||'text').toLowerCase();
      return ['text','search','url','tel','email','number','password'].includes(t);
    }
    return false;
  }
  function insertTextAtCursor(el, text){
    el.focus();
    if (el.isContentEditable){
      try { document.execCommand('insertText', false, text); }
      catch(_){
        const sel=window.getSelection();
        if (!sel || sel.rangeCount===0){ const r=document.createRange(); r.selectNodeContents(el); r.collapse(false); sel.removeAllRanges(); sel.addRange(r); }
        sel.getRangeAt(0).deleteContents();
        sel.getRangeAt(0).insertNode(document.createTextNode(text));
        sel.collapseToEnd();
      } return;
    }
    if (el.tagName==='TEXTAREA' || el.tagName==='INPUT'){
      const start = el.selectionStart ?? el.value.length;
      const end   = el.selectionEnd   ?? el.value.length;
      el.value = el.value.slice(0,start) + text + el.value.slice(end);
      const pos = start + text.length;
      el.setSelectionRange(pos,pos);
      el.dispatchEvent(new Event('input',{bubbles:true}));
    }
  }
  function makeProgressDot(x, y){
    const d=document.createElement('div');
    Object.assign(d.style,{ position:'fixed', left:(x-16)+'px', top:(y-16)+'px',
      width:'32px', height:'32px', borderRadius:'50%', zIndex:2147483647,
      background:'conic-gradient(#ffb703 0deg, #ffb703 0deg, rgba(255,255,255,0.15) 0deg)',
      boxShadow:'0 0 0 2px rgba(0,0,0,.2) inset, 0 3px 8px rgba(0,0,0,.25)', pointerEvents:'none' });
    document.body.appendChild(d); return d;
  }
  function startProgress(x, y, duration){
    stopProgress(); progressEl = makeProgressDot(x, y);
    const t0 = performance.now();
    progressTimer = setInterval(()=>{
      const p = Math.min(1, (performance.now()-t0)/duration);
      const deg = Math.floor(p*360);
      progressEl.style.background = `conic-gradient(#ffb703 ${deg}deg, rgba(255,255,255,0.15) ${deg}deg)`;
      if (p>=1) stopProgress();
    }, 30);
  }
  function stopProgress(){ if (progressTimer){ clearInterval(progressTimer); progressTimer=null; } if (progressEl){ progressEl.remove(); progressEl=null; } }
  function onPressStart(ev){
    const touch = ev.touches?.[0] || ev.changedTouches?.[0] || null;
    const x = touch ? touch.clientX : (ev.clientX ?? 0);
    const y = touch ? touch.clientY : (ev.clientY ?? 0);
    const t = ev.target; if (!isEditableTarget(t)) return; holdTarget=t;
    startProgress(x, y, HOLD_MS);
    holdTimer = setTimeout(()=>{
      holdTimer=null; stopProgress();
      if (!lastCopied.text || (Date.now()-lastCopied.ts)>WINDOW_MS){ toast('⏳ Nessun testo valido da incollare'); return; }
      if (!setChatValue(lastCopied.text)) insertTextAtCursor(holdTarget, lastCopied.text);
      toast('✅ Incollato');
    }, HOLD_MS);
  }
  function onPressEnd(){ if (holdTimer){ clearTimeout(holdTimer); holdTimer=null; } holdTarget=null; stopProgress(); }

  // —— Rilevazione pagine ——
  function isAttackOrProfile(){
    const u=location.href.toLowerCase();
    return u.includes('attack.php') || u.includes('loader.php?sid=attack') || u.includes('sid=attack')
        || u.includes('profile.php?xid=') || u.includes('profiles.php?xid=');
  }
  function isProfilePage(){
    const u = location.href.toLowerCase();
    return u.includes('profile.php?xid=') || u.includes('profiles.php?xid=');
  }

  // —— Azioni Call/Help ——
  function onCallClick(e){
    e.preventDefault(); e.stopPropagation();
    const id=getIdFromUrl();
    if (!id){ toast('⚠️ Nessun ID nell’URL'); return; }
    if (!(cached.id===id && cached.name)){ toast('⏳ Nome non pronto: attendi 1s e riprova'); return; }
    const shortName = cached.name.replace(/[^A-Za-zÀ-ÖØ-öø-ÿ]/g,'').toUpperCase().slice(0,5);
    const msg = `! ${shortName}-${id} in 5`;
    const ok = copyNow(msg);
    if (ok){ lastCopied={ text:msg, ts:Date.now() }; toast('✅ Copiato (long‑press 1.5s, valido 40s)'); }
    else { toast('⚠️ Copia bloccata: incolla manualmente'); }
  }
  function onHelpClick(e){
    e.preventDefault(); e.stopPropagation();
    const id=getIdFromUrl();
    if (!id){ toast('⚠️ Nessun ID nell’URL'); return; }
    const link = `https://www.torn.com/loader.php?sid=attack&user2ID=${id}`;
    const msg = `! Help🚨 ${link}`;
    const ok = copyNow(msg);
    if (ok){ lastCopied={ text:msg, ts:Date.now() }; toast('✅ Copiato (long‑press 1.5s, valido 40s)'); }
    else { toast('⚠️ Copia bloccata: incolla manualmente'); }
  }

  // —— Visibilità / misura / nome target ——
  function isVisible(el){
    if (!el) return false;
    const cs=getComputedStyle(el);
    if (cs.display==='none' || cs.visibility==='hidden' || cs.opacity==='0') return false;
    if (el.offsetParent===null) return false;
    const r=el.getBoundingClientRect(); return r.width>0 && r.height>0;
  }
  function pxFromCm(cm=1){
    const d=document.createElement('div');
    d.style.position='absolute'; d.style.left='-9999px'; d.style.top='-9999px';
    d.style.width=cm+'cm'; d.style.height='0'; document.body.appendChild(d);
    const px=d.getBoundingClientRect().width; d.remove(); return px;
  }
  function findTargetNameElement(){
    const selectors = [
      'a[href*="profile.php?XID="]','a[href*="profile.php?xid="]',
      'a[href*="profiles.php?XID="]','a[href*="profiles.php?xid="]',
      '[class*="userName"]','[class*="username"]','[class*="name___"] h3','[class*="name___"]',
      '[class*="defender"] [class*="name"]','[class*="opponent"] [class*="name"]',
      '[class*="target"] [class*="name"]','h3[class*="name"]','h2[class*="name"]'
    ];
    for (const sel of selectors){
      const list=document.querySelectorAll(sel);
      for (const el of list){
        const text=(el.textContent||'').trim();
        if (text && text.length>=2 && isVisible(el)) return el;
      }
    }
    return null;
  }
  function positionButtonsNearName(wrap){
    const nameEl=findTargetNameElement();
    if (!wrap || !nameEl) return false;
    const rect=nameEl.getBoundingClientRect();
    const gap=Math.round(pxFromCm(1));
    Object.assign(wrap.style,{ position:'fixed', top:Math.max(0, rect.top+2)+'px', left:Math.round(rect.right+gap)+'px',
      transform:'none', right:'auto', zIndex:2147483647 });
    const w=wrap.getBoundingClientRect().width||120;
    if (rect.right+gap+w>window.innerWidth-8){
      Object.assign(wrap.style,{ left:Math.max(8, rect.left-gap-w)+'px' });
    }
    return true;
  }

  // —— Profilo: trova barra “User Information” e monta i bottoni dentro ——
  function findProfileInfoBar(){
    if (!isProfilePage()) return null;
    const headings=document.querySelectorAll('h1,h2,h3,.title,.title-black,.content-title,[class*="title"]');
    for (const h of headings){
      const t=(h.textContent||'').trim().toLowerCase();
      if (t==='user information' || t.startsWith('user information')) return h;
    }
    const candidates=document.querySelectorAll('.title-black, .content-title, .title, .content .title');
    for (const el of candidates){
      const txt=(el.textContent||'').trim().toLowerCase();
      if (txt.includes('user information') || txt.includes('user')) return el;
    }
    return null;
  }
  function mountInProfileBar(wrap){
    const bar=findProfileInfoBar();
    if (!bar || !wrap) return false;
    const host=bar.parentElement||bar;
    const cs=getComputedStyle(host); if (cs.position==='static') host.style.position='relative';
    Object.assign(wrap.style,{ position:'absolute', top:'50%', right:'8px', left:'auto',
      transform:'translateY(-50%)', zIndex:2147483647, gap:'6px', pointerEvents:'auto' });
    if (wrap.parentElement!==host) host.appendChild(wrap);
    return true;
  }

  // —— Bottoni (ridotti ~30%) —— 
  function ensureButtons(){
    const show=isAttackOrProfile();
    let wrap=document.getElementById('call-help-wrap');
    if (!show){ if (wrap) wrap.remove(); return; }

    if (!wrap){
      wrap=document.createElement('div');
      wrap.id='call-help-wrap';
      Object.assign(wrap.style,{ display:'flex', gap:'6px', alignItems:'center', justifyContent:'center', pointerEvents:'none' });

      const makeBtn=(text,bg,handler,id)=>{
        const b=document.createElement('button');
        b.id=id; b.type='button'; b.textContent=text;
        Object.assign(b.style,{
          background:bg, color:'#111', fontWeight:'700',
          fontSize:'12px', padding:'7px 10px',
          border:'none', borderRadius:'8px',
          boxShadow:'0 4px 10px rgba(0,0,0,.22)',
          cursor:'pointer', userSelect:'none', WebkitTapHighlightColor:'transparent'
        });
        b.addEventListener('click', handler, {passive:false});
        b.style.pointerEvents='auto';
        return b;
      };
      wrap.appendChild(makeBtn('Call', '#ffb703', onCallClick, 'call-btn'));
      wrap.appendChild(makeBtn('Help', '#ff6b6b', onHelpClick, 'help-btn'));
      document.body.appendChild(wrap);
    }

    if (isProfilePage()){
      const ok = mountInProfileBar(wrap);
      if (ok) return; // già posizionati nella barra del profilo
    }

    const ok2 = positionButtonsNearName(wrap);
    if (!ok2){
      Object.assign(wrap.style,{
        position:'fixed',
        top:'calc(env(safe-area-inset-top,0px) + 110px)',
        left:'50%', right:'auto', transform:'translateX(-50%)', zIndex:2147483647
      });
    }
  }

  // —— Boot —— 
  function boot(){
    ensureButtons();
    prefetch();

    document.addEventListener('mousedown', onPressStart,  {passive:true, capture:true});
    document.addEventListener('mouseup',   onPressEnd,    {passive:true, capture:true});
    document.addEventListener('mouseleave',onPressEnd,    {passive:true, capture:true});
    document.addEventListener('touchstart',onPressStart,  {passive:true, capture:true});
    document.addEventListener('touchend',  onPressEnd,    {passive:true, capture:true});
    document.addEventListener('touchcancel',onPressEnd,   {passive:true, capture:true});

    const push=history.pushState, rep=history.replaceState;
    history.pushState=function(){const r=push.apply(this,arguments); setTimeout(()=>{ensureButtons(); prefetch();},200); return r;};
    history.replaceState=function(){const r=rep.apply(this,arguments); setTimeout(()=>{ensureButtons(); prefetch();},200); return r;};
    window.addEventListener('hashchange',()=>{ setTimeout(()=>{ensureButtons(); prefetch();},200); });
    window.addEventListener('popstate',()=>{ setTimeout(()=>{ensureButtons(); prefetch();},200); });

    window.addEventListener('resize', ()=> setTimeout(ensureButtons, 100), {passive:true});
    window.addEventListener('scroll', ()=> setTimeout(ensureButtons,  50), {passive:true, capture:true});

    setInterval(ensureButtons, 2000);
    const preTimer=setInterval(prefetch, 1500);
    setTimeout(()=>clearInterval(preTimer), 15000);
  }

  if (document.readyState==='complete' || document.readyState==='interactive') setTimeout(boot,300);
  else { window.addEventListener('DOMContentLoaded',()=>setTimeout(boot,300)); window.addEventListener('load',()=>setTimeout(boot,300)); }
})();
